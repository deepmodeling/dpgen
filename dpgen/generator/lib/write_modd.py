def write_modd():

    ret ="import argparse"
    ret+="import copy"
    ret+="import dpdata"
    ret+="import glob"
    ret+="import math"
    ret+="import numpy as np"
    ret+="import os"
    ret+="import sys"
    ret+="import shutil"
    ret+=""
    ret+=""
    ret+="def write_model_devi_out(devi, fname):"
    ret+="    assert devi.shape[1] == 8"
    ret+="    #assert devi.shape[1] == 7"
    ret+="    header = '%5s' % 'step'"
    ret+="    for item in 'vf':"
    ret+="        header += '%16s%16s%16s' % (f'max_devi_{item}', f'min_devi_{item}',f'avg_devi_{item}')"
    ret+="    header += '%16s'%str('min_dis')"
    ret+="    np.savetxt(fname,"
    ret+="               devi,"
    ret+="               fmt=['%5d'] + ['%17.6e' for _ in range(7)],"
    ret+="               delimiter='',"
    ret+="               header=header)"
    ret+="    return devi"
    ret+=""
    ret+=""
    ret+="def Modd(all_models,type_map):"
    ret+="    from deepmd.infer import calc_model_devi"
    ret+="    from deepmd.infer import DeepPot as DP"
    ret+=""
    ret+="    # Model Devi "
    ret+=""
    ret+="    cwd = os.getcwd()"
    ret+="    graphs = [DP(model) for model in all_models]"
    ret+=""
    ret+="    Devis = []"
    ret+="    pcount = 0"
    ret+="    strus_lists = glob.glob(os.path.join(cwd,'*.structures'))"
    ret+="    for num, strus_path in enumerate(strus_lists):"
    ret+=""
    ret+="        structures_data = dpdata.System(strus_path,'deepmd/npy',type_map=type_map)"
    ret+=""
    ret+="        # every 500 confs in one task dir"
    ret+="        nnum =  structures_data.get_nframes()"
    ret+="        if nnum == 0:"
    ret+="            continue"
    ret+="        else:"
    ret+="            num_per_task = math.ceil(nnum/500)"
    ret+="            "
    ret+=""
    ret+="        for temp in range(num_per_task):"
    ret+="            task_name = os.path.join(cwd,'task.%03d.%03d'%(num,temp)) "
    ret+="            put_poscar = os.path.join(task_name,'traj')"
    ret+="            if not os.path.exists(task_name):"
    ret+="                os.mkdir(task_name)"
    ret+="                os.mkdir(put_poscar)"
    ret+="            else:"
    ret+="                shutil.rmtree(task_name)"
    ret+="                os.mkdir(task_name)"
    ret+="                os.mkdir(put_poscar)"
    ret+="            devis = []"
    ret+="            if (nnum - (temp+1)*500) >= 0:"
    ret+="                temp_sl = range(temp*500,(temp+1)*500)"
    ret+="            else:"
    ret+="                temp_sl = range(temp*500,nnum)"
    ret+="                "
    ret+="            new_index = 0"
    ret+="            for index,frameid in enumerate(temp_sl):"
    ret+="                pdata = structures_data[frameid]"
    ret+="                pdata.to_vasp_poscar(os.path.join(put_poscar,'%s.poscar'%str(index)))"
    ret+="                nopbc = pdata.nopbc"
    ret+="                coord = pdata.data['coords']"
    ret+="                cell  = pdata.data['cells']"
    ret+="                atom_types = pdata.data['atom_types']"
    ret+="                devi = calc_model_devi(coord,cell,atom_types,graphs,nopbc=nopbc)"
    ret+="                # ------------------------------------------------------------------------------------"
    ret+="                # append min-distance in devi list"
    ret+="                dis = pdata.to_ase_structure()[0].get_all_distances(mic=True)"
    ret+="                row,col = np.diag_indices_from(dis)"
    ret+="                dis[row,col] = 10000"
    ret+="                min_dis = np.nanmin(dis)"
    ret+="                devi = np.append(devi[0],min_dis) "
    ret+="                t = [devi]"
    ret+="                devi = np.array(t)"
    ret+="                # ------------------------------------------------------------------------------------"
    ret+="                temp_d = copy.deepcopy(devi)"
    ret+="                temp_D = copy.deepcopy(devi)"
    ret+="                devis.append(temp_d)"
    ret+="                Devis.append(temp_D)"
    ret+="                devis[index][0][0]  = np.array(index)"
    ret+="                Devis[pcount][0][0] = np.array(pcount)"
    ret+="                pcount += 1"
    ret+="                new_index += 1"
    ret+="            devis = np.vstack(devis)"
    ret+="            write_model_devi_out(devis,os.path.join(task_name, 'model_devi.out'))"
    ret+=""
    ret+="    Devis = np.vstack(Devis)"
    ret+="    write_model_devi_out(Devis,os.path.join(cwd,'Model_Devi.out'))"
    ret+=""
    ret+="    f = open(os.path.join(os.path.abspath(os.path.join(cwd,os.pardir)),'record.calypso'),'a+')"
    ret+="    f.write('4\n')"
    ret+="    f.close()"
    ret+=""
    ret+="if __name__ == '__main__':"
    ret+=""
    ret+="    cwd = os.getcwd()"
    ret+="    model_path = os.path.join(os.path.abspath(os.path.join(cwd,os.pardir)),'gen_stru_analy')"
    ret+="    parser = argparse.ArgumentParser(description='calc model-devi by `all_models` and `type_map`')"
    ret+="    parser.add_argument("
    ret+="        '--all_models',"
    ret+="        type=str,"
    ret+="        nargs='+',"
    ret+="        default=model_path,"
    ret+="        help='the path of models which will be used to do model-deviation',"
    ret+="    )"
    ret+="    parser.add_argument("
    ret+="        '--type_map',"
    ret+="        type=list,"
    ret+="        help='the type map of models which will be used to do model-deviation',"
    ret+="    )"
    ret+="    args = parser.parse_args()"
    ret+="    print(vars(args))"
    ret+="    #Modd(args.all_models,args.type_map)"
    ret+="    #Modd(sys.argv[1],sys.argv[2])"
    return ret
